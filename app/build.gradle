plugins {
    id 'com.android.application'
}

android {
    namespace "fr.corentin.roux.x_wing_score_tracker"
    compileSdkVersion 34
    buildToolsVersion '34.0.0'

    defaultConfig {
        applicationId "fr.corentin.roux.score_tracker"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_MAJEUR + "." + VERSION_MINEUR + "." + VERSION_PATCH
        multiDexEnabled true
        ndk {
            // Filter for architectures supported by Flutter.
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
            debugSymbolLevel 'SYMBOL_TABLE'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            debuggable false
        }

        debug {
            debuggable true
        }
    }

    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_17
//        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }

    //apply this at the end of the file
    applicationVariants.configureEach { variant ->
        def buildType = variant.buildType.name
        //increment only for 'release' builds
        if ('release' == buildType) {
            def versionCode = VERSION_CODE.toInteger()
            versionCode += 1
            ant.propertyfile(file: "../gradle.properties") {
                entry(key: "VERSION_CODE", value: versionCode)
            }

            def versionPatch = VERSION_PATCH.toInteger()
            versionPatch += 1
            ant.propertyfile(file: "../gradle.properties") {
                entry(key: "VERSION_PATCH", value: versionPatch)
            }
        }
    }
}

dependencies {
//    implementation 'com.google.android.play:integrity:1.4.0'

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.8.3'
    implementation 'androidx.navigation:navigation-ui:2.8.3'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
//    implementation 'com.github.barteksc:android-pdf-viewer:2.8.1'
// https://mvnrepository.com/artifact/com.github.barteksc/android-pdf-viewer
//    implementation 'com.github.barteksc:android-pdf-viewer:3.1.0-beta.1'

    implementation 'com.github.barteksc:AndroidPdfViewer:master-SNAPSHOT'

    implementation 'androidx.multidex:multidex:2.0.1'

    /** Lombok **/
    def lombokVersion = '1.18.22'
    compileOnly 'org.projectlombok:lombok:' + lombokVersion
    annotationProcessor 'org.projectlombok:lombok:' + lombokVersion

    def RingtonePickerVersion = '2.0.6'
    implementation 'com.github.DeweyReed:UltimateRingtonePicker:' + RingtonePickerVersion

    // https://mvnrepository.com/artifact/io.vavr/vavr
    implementation 'io.vavr:vavr:1.0.0-alpha-4'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    def room_version = "2.5.0"

    implementation("androidx.room:room-runtime:" + room_version)
    annotationProcessor("androidx.room:room-compiler:" + room_version)

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:" + room_version)

    // optional - RxJava2 support for Room
    implementation("androidx.room:room-rxjava2:" + room_version)

    // optional - RxJava3 support for Room
    implementation("androidx.room:room-rxjava3:" + room_version)

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation("androidx.room:room-guava:" + room_version)

    // optional - Test helpers
    testImplementation("androidx.room:room-testing:" + room_version)

    // optional - Paging 3 Integration
    implementation("androidx.room:room-paging:" + room_version)
}